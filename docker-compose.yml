services:
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-server
    ports:
      - "9090:9090" # Expose Prometheus UI on localhost:9090
    volumes:
      # Mount your prometheus.yml config file
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      # Mount directory for Prometheus data persistence
      - prometheus-data:/prometheus
      # Optional: Mount rules directory
      - ./rules:/etc/prometheus/rules:ro
    command:
      # Prometheus startup arguments
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      # Enable web admin API (for remote management)
      - "--web.enable-admin-api"
      # Retention period for metrics (default 15 days)
      - "--storage.tsdb.retention.time=30d"
      # Enable lifecycle management via API
      - "--web.enable-lifecycle"
      # Allow external access (remove if security concern)
      - "--web.listen-address=0.0.0.0:9090"
    restart: unless-stopped
    networks:
      - monitoring
    # Optional: Resource limits
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "0.5"

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000" # Grafana UI on localhost:3001
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana-data:/var/lib/grafana
    restart: unless-stopped
    networks:
      - monitoring

  # Optional: Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100"
    volumes:
      # Mount host filesystem for system metrics
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.rootfs=/rootfs"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
    restart: unless-stopped
    networks:
      - monitoring

  nodejs-app:
    image: your-nodejs-app:latest # or build from Dockerfile
    container_name: nodejs-app
    ports:
      - "3000:3000"
    networks:
      - monitoring
    restart: unless-stopped

# Define volumes for data persistence
volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# Create a custom network for service communication
networks:
  monitoring:
    driver: bridge
